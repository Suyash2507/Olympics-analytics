# -*- coding: utf-8 -*-
"""question2&3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yIU8b1kYg-7F07iTu8-C8fnDxZ7Zrmcs
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from scipy import stats
import seaborn as sns

"""Reading the dataset"""

df = pd.read_csv('/content/Dataset.csv')

"""Get details of athlete count using sport specified"""

df["Sport"].value_counts()

"""Get total medal count"""

df["Medal"].value_counts()

"""Extracting information"""

df.info()

"""Get athletes data for male swimmers"""

Swimming = df[(df["Sport"] == "Swimming") & (df["Sex"] == "M")]

"""Print values"""

Swimming.head()

"""Extracting specific columns and cleaning the data column values"""

SwimmingM = Swimming[["Age", "Height", "Weight", "Medal"]]
SwimmingM["Age"].fillna(SwimmingM['Age'].mean(), inplace = True)
SwimmingM["Height"].fillna(SwimmingM['Height'].mean(), inplace = True)
SwimmingM["Weight"].fillna(SwimmingM['Weight'].mean(), inplace = True)
SwimmingM["Medal"].fillna("None", inplace = True)
SwimmingM = SwimmingM.reset_index(drop=True)
SwimmingM.head()

"""Using scatter values to analyse details"""

#sns.jointplot(x="Height", y="Weight", data=SwimmingM);
sns.pairplot(SwimmingM, hue="Medal")

sns.catplot(x="Medal", y="Height", kind="box", data=SwimmingM);

sns.catplot(x="Medal", y="Weight", kind="box", data=SwimmingM);

sns.catplot(x="Medal", y="Age", kind="box", data=SwimmingM);

SwimmingF = df[(df["Sport"] == "Swimming") & (df["Sex"] == "F")]

SwimmingF = SwimmingF[["Age", "Height", "Weight", "Medal"]]
SwimmingF["Age"].fillna(SwimmingF['Age'].mean(), inplace = True)
SwimmingF["Height"].fillna(SwimmingF['Height'].mean(), inplace = True)
SwimmingF["Weight"].fillna(SwimmingF['Weight'].mean(), inplace = True)
SwimmingF["Medal"].fillna("None", inplace = True)
SwimmingF = SwimmingF.reset_index(drop=True)
SwimmingF.head()

sns.pairplot(SwimmingF, hue="Medal")

sns.catplot(x="Medal", y="Height", kind="box", data=SwimmingF);

sns.catplot(x="Medal", y="Weight", kind="box", data=SwimmingF);

sns.catplot(x="Medal", y="Age", kind="box", data=SwimmingF);

SwimmingM['Medal'] = SwimmingM['Medal'].replace(['Gold','Silver','Bronze'],'1')
SwimmingM['Medal'] = SwimmingM['Medal'].replace(['None'],'0')
SwimmingM['Medal'] = SwimmingM['Medal'].astype('float')

SwimmingF['Medal'] = SwimmingF['Medal'].replace(['Gold','Silver','Bronze'],'1')
SwimmingF['Medal'] = SwimmingF['Medal'].replace(['None'],'0')
SwimmingF['Medal'] = SwimmingF['Medal'].astype('float')

SwimmingM["H/W"] = SwimmingM["Height"] / SwimmingM["Weight"]

SwimmingM["W/H"] = SwimmingM["Weight"] / SwimmingM["Height"]

sns.catplot(x="Medal", y="W/H", kind="box", data=SwimmingM);

SwimmingF["W/H"] = SwimmingF["Weight"] / SwimmingM["Height"]

sns.catplot(x="Medal", y="W/H", kind="box", data=SwimmingF);

XM = np.asarray(SwimmingM[["W/H"]])
ym = np.asarray(SwimmingM['Medal'])

from sklearn.model_selection import train_test_split
XM_train, XM_test, ym_train, ym_test = train_test_split( XM, ym, test_size=0.25, random_state=4)

from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model

poly = PolynomialFeatures(degree=2)
XM_train_poly = poly.fit_transform(XM_train)
XM_train_poly

clf = linear_model.LinearRegression()
yhat = clf.fit(XM_train_poly, ym_train)
print ('Coefficients: ', clf.coef_)
print ('Intercept: ',clf.intercept_)

from sklearn.metrics import r2_score

XM_train_poly = poly.fit_transform(XM_test)
yhat = clf.predict(XM_train_poly)
print("Mean absolute error: %.2f" % np.mean(np.absolute(yhat - ym_test)))
print("Residual sum of squares (MSE): %.2f" % np.mean((yhat - ym_test) ** 2))
yhat.max()

XF = np.asarray(SwimmingF[["W/H"]])
yf = np.asarray(SwimmingF['Medal'])

from sklearn.model_selection import train_test_split
XF_train, XF_test, yf_train, yf_test = train_test_split( XF, yf, test_size=0.25, random_state=4)

poly = PolynomialFeatures(degree=2)
XF_train_poly = poly.fit_transform(XF_train)
XF_train_poly

clf = linear_model.LinearRegression()
yhat = clf.fit(XF_train_poly, yf_train)
print ('Coefficients: ', clf.coef_)
print ('Intercept: ',clf.intercept_)

from sklearn.metrics import r2_score

XF_train_poly = poly.fit_transform(XF_test)
yhat = clf.predict(XF_train_poly)
print("Mean absolute error: %.2f" % np.mean(np.absolute(yhat - yf_test)))
print("Residual sum of squares (MSE): %.2f" % np.mean((yhat - yf_test) ** 2))
yhat.max()